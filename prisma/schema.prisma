generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id                  String  @id @default(cuid())
  email               String  @unique
  name                String?
  image               String?
  googleAccessToken   String?
  googleRefreshToken  String?
  hubspotAccessToken  String?
  hubspotRefreshToken String?
  hubspotPortalId     String?

  gmailData       Json?
  hubspotData     Json?
  lastGmailSync   DateTime?
  lastHubspotSync DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages            Message[]
  documents           Document[]
  tasks               Task[]
  instructions        OngoingInstruction[]
  WebhookSubscription WebhookSubscription[]
  notifications    Notification[]
  activityLogs     ActivityLog[]

  @@map("users")
}

model Message {
  id        String   @id @default(cuid())
  userId    String
  role      String // 'user' or 'assistant'
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  source    String // 'gmail', 'hubspot'
  sourceId  String // original email ID or hubspot contact ID
  metadata  Json?
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vectors Vector[]

  @@map("documents")
}

model Vector {
  id         String                 @id @default(cuid())
  documentId String
  content    String
  embedding  Unsupported("vector")?
  metadata   Json?
  createdAt  DateTime               @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("vectors")
}

model Task {
  id          String   @id @default(cuid())
  userId      String
  description String
  status      String   @default("pending") // pending, in_progress, completed, failed
  context     Json?
  result      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model OngoingInstruction {
  id          String   @id @default(cuid())
  userId      String
  instruction String   @db.Text
  isActive    Boolean  @default(true)
  priority    String?  @default("normal") // "low", "normal", "high"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
}

model WebhookSubscription {
  id         String    @id @default(cuid())
  userId     String
  service    String // gmail, calendar, hubspot
  webhookUrl String
  expiresAt  DateTime?
  metadata   Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, service])
  @@map("webhook_subscriptions")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'contact_created', 'update', 'error', etc.
  service   String   // 'hubspot', 'gmail', 'calendar'
  title     String
  message   String
  data      Json?    // Additional data about the notification
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, read])
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // 'contact_created', 'contact_updated', 'email_processed', etc.
  service   String   // 'hubspot', 'gmail', 'calendar'
  details   Json?    // Detailed information about the activity
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, service])
  @@index([userId, action])
}

